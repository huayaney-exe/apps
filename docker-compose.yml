version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --log.level=INFO
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/acme:/acme
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
      - "traefik.http.routers.traefik.middlewares=auth"
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - WEBHOOK_URL=https://n8n.${DOMAIN}
      - GENERIC_TIMEZONE=${TIMEZONE}
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${SMTP_HOST}
      - N8N_SMTP_PORT=${SMTP_PORT}
      - N8N_SMTP_USER=${SMTP_USER}
      - N8N_SMTP_PASS=${SMTP_PASS}
      - N8N_SMTP_SENDER=${SMTP_FROM}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - app-network

  # Hi.Events Application
  hievents-app:
    image: hievents/hi.events:latest
    container_name: hievents-app
    restart: unless-stopped
    environment:
      APP_NAME: "Hi.Events"
      APP_ENV: production
      APP_KEY: ${HIEVENTS_APP_KEY}
      APP_DEBUG: false
      APP_URL: https://events.${DOMAIN}
      
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${HIEVENTS_DB_NAME}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      
      REDIS_HOST: redis
      REDIS_PASSWORD: null
      REDIS_PORT: 6379
      
      MAIL_MAILER: smtp
      MAIL_HOST: ${SMTP_HOST}
      MAIL_PORT: ${SMTP_PORT}
      MAIL_USERNAME: ${SMTP_USER}
      MAIL_PASSWORD: ${SMTP_PASS}
      MAIL_ENCRYPTION: ${SMTP_ENCRYPTION}
      MAIL_FROM_ADDRESS: ${SMTP_FROM}
      MAIL_FROM_NAME: "Hi.Events"
      
      JWT_SECRET: ${HIEVENTS_JWT_SECRET}
      JWT_ALGO: HS256
      JWT_TTL: 86400
      
      FILESYSTEM_DISK: local
      
      LOG_CHANNEL: stack
      LOG_DEPRECATIONS_CHANNEL: null
      LOG_LEVEL: error
    volumes:
      - hievents_storage:/var/www/html/storage
      - hievents_public:/var/www/html/public
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hievents.rule=Host(`events.${DOMAIN}`)"
      - "traefik.http.routers.hievents.entrypoints=websecure"
      - "traefik.http.routers.hievents.tls.certresolver=letsencrypt"
      - "traefik.http.services.hievents.loadbalancer.server.port=80"
    networks:
      - app-network

  # Hi.Events Queue Worker
  hievents-queue:
    image: hievents/hi.events:latest
    container_name: hievents-queue
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --timeout=90
    environment:
      APP_NAME: "Hi.Events"
      APP_ENV: production
      APP_KEY: ${HIEVENTS_APP_KEY}
      APP_DEBUG: false
      APP_URL: https://events.${DOMAIN}
      
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${HIEVENTS_DB_NAME}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      
      REDIS_HOST: redis
      REDIS_PASSWORD: null
      REDIS_PORT: 6379
      
      MAIL_MAILER: smtp
      MAIL_HOST: ${SMTP_HOST}
      MAIL_PORT: ${SMTP_PORT}
      MAIL_USERNAME: ${SMTP_USER}
      MAIL_PASSWORD: ${SMTP_PASS}
      MAIL_ENCRYPTION: ${SMTP_ENCRYPTION}
      MAIL_FROM_ADDRESS: ${SMTP_FROM}
      MAIL_FROM_NAME: "Hi.Events"
      
      JWT_SECRET: ${HIEVENTS_JWT_SECRET}
    volumes:
      - hievents_storage:/var/www/html/storage
    depends_on:
      - postgres
      - redis
      - hievents-app
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  hievents_storage:
  hievents_public:

networks:
  app-network:
    driver: bridge